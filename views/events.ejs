<html>
<title>CEM: Events</title>

<!-- Using the twitter icon, don't delete -->
<script src="https://kit.fontawesome.com/962d9b3821.js" crossorigin="anonymous"></script>

<head>
  <meta property="og:title" content="I just made an event for College Event Manager!"/>
  <meta property="og:site_name" content="College Event Manager"/>
  <script type="text/javascript" src="https://platform-api.sharethis.com/js/sharethis.js#property=64227370ff8036001a234afc&product=inline-share-buttons&source=platform" async="async"></script>
</head>

<style>

  /* Setting the events background */
  body {
    background-image: url("../images/EventsBackground.jpg");
    background-size: cover;
  }
    
  /* Setting dimensions and styling the create background */
  #createEventsBackground {
    align-items: center;
    background-color: #C5C7C8;
    border: 3px solid #FEF3B3;
    border-radius: 10px;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    position: absolute;
    text-align: center;
    transform: translate(-103%, -46%);

    height: 600px;
    width: 450px;

    left: 50%;
    top: 50%;

    overflow: auto;
  }

  /* Setting and styling the "CREATE EVENTS" and "CURRENT EVENTS" titles */
  #eventsTitle {
    align-items: center;
    background-color: #FEF3B3;
    border-radius: 6px;
    color: #000000;
    display: flex;
    font-size: 18pt;
    font-weight: bold;
    justify-content: center;
    margin-top: 1.5em;
    margin-bottom: 0.5em;
    padding-bottom: 0.5em;
    padding-top: 0.5em;

    height: 50px;
    width: 380px;
  }

  /* Setting and styling the fields of "CREATE EVENTS" */
  #nameField text, #startField text, #endField text, #phoneNumberField text, #emailAddressField text,
  #permissionLevelField text, #hostRSOField text, #universityField text, #descriptionField text, #latitudeField text, #longitudeField text {
    color: #000000;
    display: inline-block;
    font-size: 11pt;
    margin-left: 0.65em;
    text-align: right;
    width: 100px;
    white-space: nowrap;
  }
  #name, #startTime, #endTime, #phoneNumber, #emailAddress,
  #permissionLevel, #hostRSO, #university, #description, #latitude, #longitude {
    color: #656565;
    border: none;
    border-radius: 4px;
    margin-bottom: 0.5em;
    margin-right: 1em;
    text-align: left;
    text-indent: 6px;

    height: 30px;
    width: 280px;
  }
  /* Removing the "focus ring" when the fields of "CREATE EVENTS" is clicked */
  #name:focus, #startTime:focus, #endTime:focus, #phoneNumber:focus, #emailAddress:focus,
  #permissionLevel:focus, #hostRSO:focus, #universityField:focus, #description:focus, #latitude:focus, #longitude:focus {
    outline: none;
  }
  /* Setting and styling inside the "CREATE EVENTS" field*/
  #name::placeholder, #startTime::placeholder, #endTime::placeholder, #phoneNumber::placeholder, #emailAddress::placeholder,
  #permissionLevel::placeholder, #hostRSO::placeholder, #universityField::placeholder, #description::placeholder, #latitude::placeholder, #longitude::placeholder {
    color: #656565;
    background-color: #FBFBFB;
    border: none;
    border-radius: 4px;
    margin-bottom: 0.5em;
    margin-right: 1em;
    text-align: left;
  }

  input[type="text"], input[type="date"], input[type="time"] {
    width: 45%;
    box-sizing: border-box;
  }

  .pac-card {
    margin: 10px 10px 0 0;
    border-radius: 2px 0 0 2px;
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    outline: none;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    background-color: #fff;
    font-family: Roboto;
  }
  #pac-container {
    padding-bottom: 12px;
    margin-right: 12px;
  }
  .pac-controls {
    display: inline-block;
    padding: 5px 11px;
  }
  .pac-controls label {
    font-family: Roboto;
    font-size: 13px;
    font-weight: 300;
  }
  .aContainer {
    color: red;
    font-size: 10pt;
    white-space: nowrap;
    padding-bottom: 11px;
  }
  /* Setting and styling the "SEARCH LOCATIONS" search bar */
  #pac-input {
    color: #656565;
    background-color: #FBFBFB;
    border: none;
    border-radius: 4px;
    font-family: Arial, Helvetica, sans-serif;
    margin-bottom: 0.5em;
    text-align: center;

    height: 30px;
    width: 380px;
  }
  /* Removing the "focus ring" when the "SEARCH LOCATIONS" search bar is clicked */
  #pac-input:focus {
    outline: none;
  }

  /* Setting the Google map dimensions */
  #map {
    border-radius: 4px;
    height: 200px;
    width: 380px;
    margin: auto;
    margin-bottom: 0.5em;
  }

  /* Styling the error message (if there is one) */
  #errorMessage {
    color: rgb(255, 0, 0);
    font-size: 10pt;
    position: center;
    white-space: nowrap;
  }
  #buttonContainer {
  display: flex;
  justify-content: center;
  align-items: center;
  }

  #createButton, #twitterButton {
    border-radius: 8px;
    font-size: 14pt;
    margin: 3px;
    outline: none;
    text-align: center;
  }

  #createButton {
    background-color: #5cb85c;
    border: none;
    color: #FFFFFF;
    height: 35px;
    width: 324px;
  }

  #createButton:hover {
    background-color: #51a151;
  }

  #twitterButton {
    background-color: #1DA1F2;
    height: 35px;
    width: 50px;
  }

  #twitterButton:hover {
    background-color: #1a98e6;
  }

  /* Setting dimensions and styling the "CURRENT EVENTS" background */
  #currentEventsBackground {
    align-items: center;
    background-color: #C5C7C8;
    border: 3px solid #FEF3B3;
    border-radius: 10px;
    display: flex;
    flex-direction: column;
    padding-bottom: 2em;
    position: absolute;
    text-align: center;
    transform: translate(3%, -46%);

    height: 600px;
    width: 450px;

    left: 50%;
    top: 50%;

    overflow: auto;
  }

  /* Styling the filter background */
  #filterBackground {
    color: #000000;
    display: flex;
    text-align: center;

    width: 380px;
  }

  /* Styling the filter buttons */
  #filter {
    background-color: #48a0cd;
    border: none;
    border-radius: 4px;
    color: #FFFFFF;
    font-size: 10pt;
    margin-right: 1em;
    text-align: center;
    text-transform: uppercase;

    height: 30px;
    width: 85px;
  }
  /* Changing the filter button color when hovered over */
  #filter:hover {
    background-color: #1e90c9;
  }

  /* Styling the individual events title in the "CURRENT EVENTS" */
  #postedName {
    color: #000000;
    background-color: #FEF3B3;
    display: block;
    font-size: 12pt;
    font-weight: bold;
    margin-bottom: 0.5em;
    text-align: center;
    text-transform: uppercase;
  }

  #startTime, #endTime {
    margin: left;
  }

  /* Styling the individual events in the "CURRENT EVENTS" */
  #individualEventOutline {
    border: 3px solid #FEF3B3;
    border-radius: 6px;
    color: #000000;
    margin-bottom: 0.5em;
    text-align: left;

    width: 380px;
  }

  /* Adding spaces in between individual events in the "CURRENT EVENTS" */
  #grid-container {
    display: grid;
    grid-template-columns: 142px auto;
  }

  /* Styling the "CURRENT EVENTS" fields */
  #grid-item-fields {
    font-weight: bold;
    font-size: 10pt;
    margin-left: 1.5em;
  }

  /* Styling the "DETAILS" button */
  #reviewButton {
    background-color: #5cb85c;
    border: none;
    border-radius: 4px;
    color: #FFFFFF;
    line-height: 0px;
    margin-bottom: 0.8em;
    margin-top: 0.5em;
    text-align: center;

    height: 30px;
    width: 90px;
  }
  #reviewButton:hover {
    background-color: #51a151;
  }
  #reviewButton:focus {
    outline: none;
  }
  #maintitleFormat {
    align-items: center;
    background-color: #FEF3B3;
    border-radius: 6px;
    color: #000000;
    display: flex;
    font-size: 40pt;
    font-weight: bold;
    justify-content: center;
    margin-top: 1.5em;
    margin-bottom: 0.5em;
    transform: translateX(-50%, -50%);

    height: 70px;
    width: 400px;
    border: 2px solid #C5C7C8;
    white-space: nowrap;
    overflow: hidden;
  }

</style>

<%= include partials/header.ejs %>

<body>
  <center><h1><text id="maintitleFormat">Events</text></h1><center></br>
  <div id="wrappingBackground">
    <!-- Code for "CREATE EVENTS" -->
    <div id="createEventsBackground">
      <text id="eventsTitle">CREATE EVENTS</text>
      <form class="form" action="/events" method="post">
        <div class = "aContainer" >
          <text> <% if (message && message.length > 1)%><%=message%></text>
        </div>
        <div id="permissionLevelField">
          <text>PERMISSION:</text>
          <select id="permissionLevel" name="type" onchange="checkPermissionLevel()">
            <option value="priv">PRIVATE</option>
            <option value="pub">PUBLIC</option>
            <option value="org">RSO</option>
          </select>
        </div>
        <div id="nameField">
          <text>NAME:</text>
          <input id="name" type="text" name="name" placeholder="EVENT NAME" required>
        </div>
        <div id="startField">
          <text>START TIME:</text>
          <input id="startTime" type="datetime-local" name="startTime" required>
        </div>
        <div id="endField">
          <text>END TIME:</text>
          <input id="endTime" type="datetime-local" name="endTime" required>
        </div>
        <div id="phoneNumberField">
          <text>PHONE #:</text>
          <input id="phoneNumber" type="text" name="phone" placeholder="PHONE #" required>
        </div>
        <div id="emailAddressField">
          <text>EMAIL:</text>
          <input id="emailAddress" type="text" name="email" placeholder="EMAIL">
        </div>
        <div id="hostRSOField" style="display:none">
          <text>HOST RSO:</text>
          <select id="hostRSO" name="RSO"><%for (var i = 0; i < RSO.length; i++){%><option name="rsoName" value="<%=RSO[i].Name%>"> <%=RSO[i].Name%> <%}%></select>
        </div>

        <script>
          // This whole script section allows us to listen for changes to the event type and show/hide RSO option depending on that
          const permissionLevelSelect = document.getElementById('permissionLevel');
          const myDiv = document.getElementById('hostRSOField');
          
          permissionLevelSelect.addEventListener('change', () => {
            const selectedValue = permissionLevelSelect.value;
            
            if (selectedValue === 'org') {
              // Shows RSO option
              hostRSOField.style.display = 'block'; 
            } else {
              // Hides RSO option
              hostRSOField.style.display = 'none'; 
            }
          });
        </script>

        <div id="universityField">
          <text>UNIVERSITY:</text>
          <% if(uni) {%><select id="university" name="uni"><option value = "<%= uni %>"> <%= uni %> </option> </select><%}%>
        </div>
        <div id="descriptionField">
          <text>DESCRIPTION:</text>
          <input id="description" type="text" name="description" placeholder="DESCRIPTION">
        </div>
        <div id="latitudeField">
          <text>LATITUDE:</text>
          <input id="latitude" type="text" name="latitude" placeholder="LATITUDE">
        </div>
        <div id="longitudeField">
          <text>LONGITUDE:</text>
          <input id="longitude" type="text" name="longitude" placeholder="LONGITUDE">
        </div>
        <input id="pac-input" class="controls" name = "location" type="text" placeholder="SEARCH LOCATIONS">
        <div id="map"></div>
        <div id="buttonContainer">
          <button id="createButton" type="submit">CREATE</button>
          <a href="#"
            onclick="window.open('https://twitter.com/intent/tweet?text=I+just+registered+for+College+Event+Manager%21+http%3A%2F%2Flocalhost%3A3000%2Fregister', 'newwindow', 'width=600, height=250'); return false;">
            <button id="twitterButton" class="btn btn-info"><i class="fa fa-twitter"></i></button>
          </a>
        </div>
        <!-- DO NOT DELETE: A cheating way to make more room at the bottom -->
        <div style="height: 30px;"></div>
      </form>
    </div>

    <!-- Code for "CURRENT EVENTS" -->
    <div id="currentEventsBackground">
      <text id="eventsTitle">CURRENT EVENTS</text>
      <!-- Code for "FILTER EVENTS" -->
      <div id="filterBackground">
        <form method="get" action=" "><input id="filter" class="test" type="submit" value="Public" name="selection"> </form>
        <form method="get" action=" "><input id="filter" class="test" type="submit" value="Private" name="selection"></form>
        <form method="get" action=" "><input id="filter" class="test" type="submit" value="RSO" name="selection"></form>
        <form method="get" action=" "><input id="filter" class="test" type="submit" value= "All" name="selection"></form>
      </div>
      <% for (var i = 0; i < events.length; i++) { %>
        <div id="individualEventOutline">
          <div id="postedName"><%= events[i].Name %></div>
          <div id="grid-container">
            <div id="grid-item-fields">DATE:</div>
            <div><%= events[i].startTime.toLocaleString() %></div>
            <div id="grid-item-fields">TIME:</div>
            <div><%= events[i].endTime.toLocaleString() %></div>
            <div id="grid-item-fields">LOCATION:</div>
            <div><%= events[i].Location %></div>
            <div id="grid-item-fields">EMAIL:</div>
            <div><%= events[i].Email %></div>
            <div id="grid-item-fields">PHONE #:</div>
            <div><%= events[i].Phone %></div>
            <div id="grid-item-fields">DESCRIPTION: </div>
            <div><%= events[i].Description%></div>
          </div>
          <div style="display:flex; justify-content:center;"><input id="reviewButton" type="button" class="btn btn-info" value="REVIEWS" onclick="window.location='/events/<%= events[i].Event_ID %>'"></div>
        </div>
      <%}%>
    <div id="fakeSpace"></div>
    </div>
  </div>

</body>

<script>
  function initAutocomplete()
  {
    var map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: 28.612, lng: -81.201},
      zoom: 13,
      disableDefaultUI: true,
      zoomControl: true,
      mapTypeId: 'roadmap'
    });

    // Create the search box and link it to the UI element.
    var input = document.getElementById('pac-input');
    var searchBox = new google.maps.places.SearchBox(input);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    // Bias the SearchBox results towards current map's viewport.
    map.addListener('bounds_changed', function() {searchBox.setBounds(map.getBounds());});

    // Use to capture event
    google.maps.event.addListener(map, 'click', function (e) {
      document.getElementById("latitude").value = e.latLng.lat();
      document.getElementById("longitude").value = e.latLng.lng();
      placeMarker(e.latLng, map);
    });

    var markers = [];

    // Listen for the event fired when the user selects a prediction and retrieve more details for that place.
    searchBox.addListener('places_changed', function() {
      var places = searchBox.getPlaces();
      if (places.length == 0) {return;}

      // Clear out the old markers
      markers.forEach(function(marker) {marker.setMap(null);}); markers = [];

      // For each place, get the icon, name and location
      var bounds = new google.maps.LatLngBounds(), lat, lng;

      places.forEach(function(place) {
        if (!place.geometry) {console.log("* Returned place contains no geometry *"); return;}
        var icon = {
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(25, 25)
        };

        // Create a marker for each place.
        markers.push(new google.maps.Marker({
          map: map,
          icon: icon,
          title: place.name,
          position: place.geometry.location,
          lat: place.geometry.location.latitude,
          lng: place.geometry.location.longitude       
        }));

        // Only geocodes have viewport
        if (place.geometry.viewport) {bounds.union(place.geometry.viewport);}
        else {bounds.extend(place.geometry.location);}

        document.getElementById("latitude").value = place.geometry.location.lng();;
        document.getElementById("longitude").value = place.geometry.location.lat();;
      });
      map.fitBounds(bounds);
    });
  }
  
</script>

<!-- Google maps API -->
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDV7fOmX1MiB8AbdOPJHossdycSGXsP-wQ&libraries=places&callback=initAutocomplete" async defer></script>

</html>